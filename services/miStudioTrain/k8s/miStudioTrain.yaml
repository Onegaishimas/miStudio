# Namespace for miStudio services
apiVersion: v1
kind: Namespace
metadata:
  name: mistudio-services
  labels:
    name: mistudio-services
    app.kubernetes.io/name: mistudio
    app.kubernetes.io/component: services

---
# ConfigMap for miStudioTrain configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mistudio-train-config
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: config
data:
  DATA_PATH: "/data"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  MAX_CONCURRENT_JOBS: "2"
  DEFAULT_MODEL: "EleutherAI/pythia-160m"
  DEFAULT_BATCH_SIZE: "32"
  CUDA_MEMORY_FRACTION: "0.9"

---
# Secret for sensitive configuration (if needed)
apiVersion: v1
kind: Secret
metadata:
  name: mistudio-train-secrets
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: secrets
type: Opaque
data:
  # Add any sensitive data here (base64 encoded)
  # Example: HUGGINGFACE_TOKEN: <base64-encoded-token>

---
# Persistent Volume for data storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mistudio-data-pv
  labels:
    app: mistudio-train
    component: storage
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /var/snap/microk8s/common/default-storage/mistudio-data
    type: DirectoryOrCreate

---
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mistudio-data-pvc
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  volumeName: mistudio-data-pv

---
# Deployment for miStudioTrain service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mistudio-train-deployment
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: api-service
    version: v1.1.0
spec:
  replicas: 1  # Single replica for GPU-intensive workload
  selector:
    matchLabels:
      app: mistudio-train
  template:
    metadata:
      labels:
        app: mistudio-train
        component: api-service
        version: v1.1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mistudio-train-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: mistudio-train
        image: localhost:32000/mistudio/train:v1.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http-api
          protocol: TCP
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"  # Use RTX 3090 by default
        envFrom:
        - configMapRef:
            name: mistudio-train-config
        - secretRef:
            name: mistudio-train-secrets
            optional: true
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: "1"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: data-storage
          mountPath: /data
        - name: tmp-storage
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: mistudio-data-pvc
      - name: tmp-storage
        emptyDir:
          sizeLimit: 1Gi
      nodeSelector:
        gpu-type: "nvidia"
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "nvidia.com/gpu.present"
                operator: In
                values: ["true"]

---
# Service Account for RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mistudio-train-sa
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: rbac

---
# ClusterRole for necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mistudio-train-role
  labels:
    app: mistudio-train
    component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mistudio-train-binding
  labels:
    app: mistudio-train
    component: rbac
subjects:
- kind: ServiceAccount
  name: mistudio-train-sa
  namespace: mistudio-services
roleRef:
  kind: ClusterRole
  name: mistudio-train-role
  apiGroup: rbac.authorization.k8s.io

---
# Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: mistudio-train-service
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http-api
  selector:
    app: mistudio-train

---
# Service for external access (NodePort for development)
apiVersion: v1
kind: Service
metadata:
  name: mistudio-train-external
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: external-service
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: 8000
    nodePort: 30800
    protocol: TCP
    name: http-api
  selector:
    app: mistudio-train

---
# HorizontalPodAutoscaler (for CPU-based scaling when not GPU-bound)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mistudio-train-hpa
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mistudio-train-deployment
  minReplicas: 1
  maxReplicas: 2  # Limited by GPU availability
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mistudio-train-monitor
  namespace: mistudio-services
  labels:
    app: mistudio-train
    component: monitoring
spec:
  selector:
    matchLabels:
      app: mistudio-train
      component: service
  endpoints:
  - port: http-api
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s